{
  "name": "Swift's Yolo! Operator",
  "tagline": "Be safe.",
  "body": "What is Swift's Yolo! operator? Simply put, this is the bang `!` operator used to force-unwrap optionals. We've all done it -- don't lie. When practicing safe yolo, the Yolo! operator can be a fun, healthy way to write code. So are you practicing safe yolo?\r\n\r\n# Why \"Yolo\"?\r\nWhen an optional variable is force-unwrapped \"unsafely\", we are telling the compiler \"Hey bro, don't worry about this variable -- I know better than you do. Yolo. ¯\\_(ツ)_/¯\" You will get to know this line of code shortly because there is an excellent chance you will see it again in a crash report with the name `EXC_BREAKPOINT`.\r\n\r\n# Safe Yolo\r\n\r\n# Unsafe Yolo\r\n\r\n# Some reasons we yolo\r\n\r\n## Storyboard Unpacking\r\nLet's get this one out of the way since it's going to come up. When you create an IBOutlet from a storyboard or a xib, Xcode will create this gem:\r\n\r\n``` lang:swift\r\n@IBOutlet weak var MyButton: UIButton!\r\n```\r\n\r\nThis is as \"safe\" yolo as you are going to get as the storyboard unpacking system has more knowledge about the system it is building than the compiler does. If these variables are nil when you try and access them, there are only a few possibilities:\r\n\r\n1. You are accessing them before `awakeFromNib` has been called\r\n2. You didn't connect that `IBOutlet` to your storyboard\r\n\r\n## We are given an optional from... somewhere\r\nSomeone (of course not you) has indicated that some variable is \"optional\" and you want to pass it into a function that requires a non-optional parameter.\r\n\r\n### Wrong\r\n``` lang:swift\r\nfunc completionCallback(optionalObject: Any?, error: ErrorType?) {\r\n    guard error == nil else {\r\n        // handle the error\r\n        return\r\n    }\r\n \r\n    // do some processing\r\n    self.nonOptionalFunc(optional!)\r\n}\r\n```\r\n\r\n### Right\r\n``` lang:swift\r\nfunc completionCallback(optionalObject: Any?, error: ErrorType?) {\r\n    guard error == nil else {\r\n        // handle the error\r\n        return\r\n    }\r\n \r\n    if let unwrappedOptional = optional {\r\n        // do some processing\r\n        self.nonOptionalFunc(unwrappedOptional)\r\n    } else {\r\n        // explicitly handle this case since something clearly went wrong\r\n    }\r\n}\r\n```\r\n\r\n## Singletons\r\n## Inline optionals",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}